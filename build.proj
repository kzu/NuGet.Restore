<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 Daniel Cazzulino

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" InitialTargets="_CheckPrerequisites" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  =============================================================================================
            Simple Build script for code + nugets
	
	Usage
	
	@(Solution): 
	Solutions to build. Use AdditionalProperties metadata to customize the build process for them.
  Defaults to including src\*.sln
	
	@(NuSpec):
	NuGet packages to build, with optional Version metadata information.
	NuGet.exe Pack is called on these items after the solutions are built. 
  Defaults to including **\*.nuspec

  To leverage build-time nuget packages, just create a packages.config alongside this project 
  file, and they will be restored automatically on build. These packages are restored without 
  version information in the directory, so they can be easily referenced from this project 
  file by just using $(PackagesPath)\[Package Id]\....[artifact location]. A Condition should 
  always be used to detect the presence of the Import (project) or Using (task) element if used, 
  since a package restore may have not happened yet and would avoid breaking the first build.
  
  Optional auto-versioning of @(NuSpec): if the packages.config file alongside this project 
  includes the GitInfo package, it is used to augment NuSpec items without a Version metadata 
  with version determined by GitInfo, with the format. See BuildPackages for format.
  =============================================================================================
  -->

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
    <!-- Solutions at the root of the src directory are all built automatically unless overriden -->
    <IncludeSolution Condition=" '$(IncludeSolution)' == '' ">src\*.sln</IncludeSolution>
    <!-- All nuspec files found will be used to build nuget packages automatically unless overriden -->
    <IncludeNuSpec Condition=" '$(IncludeNuSpec)' == '' ">**\*.nuspec</IncludeNuSpec>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      BuildSolutions;
      BuildPackages;
    </BuildDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <!-- To build a single solution or project, just pass it as a property $(Solution) -->
    <Solution Include="$(IncludeSolution)" Condition=" '$(IncludeSolution)' != '' And '$(Solution)' == '' ">
      <AdditionalProperties>Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)</AdditionalProperties>
    </Solution>
    <Solution Include="$(Solution)" Condition=" '$(Solution)' != '' ">
      <AdditionalProperties>Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)</AdditionalProperties>
    </Solution>

    <NuSpec Include="$(IncludeNuSpec)" />
  </ItemGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="BuildSolutions" Condition=" '@(Solution)' != '' ">
    <MSBuild Projects="@(Solution)" />
  </Target>

  <Target Name="BuildPackages" Condition=" '@(NuSpec)' != '' " DependsOnTargets="GitInfoReport">
    <ItemGroup>
      <NuSpecWithVersion Include="@(NuSpec -> HasMetadata('Version'))" />
      <NuSpecWithoutVersion Include="@(NuSpec)" Exclude="@(NuSpecWithVersion)" />
    </ItemGroup>

    <!-- If the user chose to use GitInfo for the build, augment the NuSpecs that don't have 
         Version metadata with version information from Git. -->
    <ItemGroup Condition=" '$(GitVersionFile)' != '' ">
      <NuSpecWithoutVersion>
        <Version>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)</Version>
      </NuSpecWithoutVersion>
      <NuSpecWithVersion Include="@(NuSpecWithoutVersion)" />
      <NuSpecWithoutVersion Remove="@(NuSpecWithoutVersion)" />
    </ItemGroup>

    <Exec Command='"$(NuGet)" Pack "@(NuSpecWithVersion)" -NoPackageAnalysis -NonInteractive -Version %(Version) -Properties Configuration=$(Configuration)'
			  Condition="'%(Identity)' != ''" />
    <Exec Command='"$(NuGet)" Pack "@(NuSpecWithoutVersion)" -NoPackageAnalysis -NonInteractive -Properties Configuration=$(Configuration)'
			  Condition="'%(Identity)' != ''" />
  </Target>

  <Import Project="build.targets" />
</Project>